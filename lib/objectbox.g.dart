// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/habit.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6979109680142795989),
      name: 'Habit',
      lastPropertyId: const IdUid(2, 8336359816544026075),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4872861899314982632),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8336359816544026075),
            name: 'habitName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7570966867880547580),
            name: 'dates',
            targetId: const IdUid(2, 456136449786670084))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 456136449786670084),
      name: 'TrackDate',
      lastPropertyId: const IdUid(3, 4357920353396319788),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5208661394387759637),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 76664725893272784),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4357920353396319788),
            name: 'habitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 793389496873176321),
            relationTarget: 'Habit')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 456136449786670084),
      lastIndexId: const IdUid(1, 793389496873176321),
      lastRelationId: const IdUid(1, 7570966867880547580),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Habit: EntityDefinition<Habit>(
        model: _entities[0],
        toOneRelations: (Habit object) => [],
        toManyRelations: (Habit object) =>
            {RelInfo<Habit>.toMany(1, object.id): object.dates},
        getId: (Habit object) => object.id,
        setId: (Habit object, int id) {
          object.id = id;
        },
        objectToFB: (Habit object, fb.Builder fbb) {
          final habitNameOffset = fbb.writeString(object.habitName);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, habitNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final habitNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Habit(id: idParam, habitName: habitNameParam);
          InternalToManyAccess.setRelInfo<Habit>(
              object.dates, store, RelInfo<Habit>.toMany(1, object.id));
          return object;
        }),
    TrackDate: EntityDefinition<TrackDate>(
        model: _entities[1],
        toOneRelations: (TrackDate object) => [object.habit],
        toManyRelations: (TrackDate object) => {},
        getId: (TrackDate object) => object.id,
        setId: (TrackDate object, int id) {
          object.id = id;
        },
        objectToFB: (TrackDate object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addInt64(2, object.habit.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final object = TrackDate(date: dateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.habit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.habit.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Habit] entity fields to define ObjectBox queries.
class Habit_ {
  /// see [Habit.id]
  static final id = QueryIntegerProperty<Habit>(_entities[0].properties[0]);

  /// see [Habit.habitName]
  static final habitName =
      QueryStringProperty<Habit>(_entities[0].properties[1]);

  /// see [Habit.dates]
  static final dates =
      QueryRelationToMany<Habit, TrackDate>(_entities[0].relations[0]);
}

/// [TrackDate] entity fields to define ObjectBox queries.
class TrackDate_ {
  /// see [TrackDate.id]
  static final id = QueryIntegerProperty<TrackDate>(_entities[1].properties[0]);

  /// see [TrackDate.date]
  static final date =
      QueryIntegerProperty<TrackDate>(_entities[1].properties[1]);

  /// see [TrackDate.habit]
  static final habit =
      QueryRelationToOne<TrackDate, Habit>(_entities[1].properties[2]);
}
